                       How to build Reduce using CSL
                       =============================


These instructions are only necessary if you are going to re-build both CSL
and REDUCE from scratch, possibly using a quite different C compiler
from the one that Codemist used to prepare this distribution.

Make sure that you know where the "cslbase" directory is (it does not
have to be within the REDUCE source tree, but in this distribution
that is where it will start off).

The REDUCE source should have directories within it called src, cslsrc,
xmpl and xlog (and probably some others). At the same level create a new
empty directory. A suitable (long) name for this directory would indicate
what machine, operating system and C compiler you are using, eg
            csl_hp9000_unix_c89
        or  csl_80x86_win95_watcom
but as a matter of practicality you will probably choose a shorter name.
Select that directory as current.

Copy into it the files "makemake.c" from the "cslbase" and "makebase" from
the "cslsrc" directory.  Use your C compiler to compile makemake.c so you have
an executable called makemake. E.g., on some Unix systems the command would be
           gcc makemake.c -o makemake
but sometimes you will need to specify other command line options to the
C compiler.where the C compiler. The program "makemake.c" attempts to be
as portable and system independent as it can be and ought to compile
unaltered on any system you are liable to come across.

Now go
          makemake
and you should see a list of options (extracted from the file "makebase").
Inspect them, and choose the ones you want, then go (for instance)
          makemake -o Makefile sparc gcc
or        makemake -o makefile win95 microsoft

When asked to, enter the location of the "cslbase" directory. Even when using
DOS or Windows you should give the directory path with "/" characters as
separators not "\".  The command should create a file called "Makefile" for
you.  If the makebase prototype does not provide options that match your
system precisely, or if changes to your operating system or C compiler render
its contents out of date you should specify the closest set of options to
your needs and then inspect and as necessary edit Makefile for yourself. This
should not usually be necessary.

Now try
         make csl         [for Unix]
    or   make csl.exe     [for DOS/Windows]
followed by
         make slowr36.img
         make ccode
         make r36.img


The system comes with the final files from all this pre-built using Watcom
C version 10.5, and the files are in a directory r36\cslwin95.

